name: Advanced C++ CI/CD Pipeline with Qt 6

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Qt 6 and dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          qt6-base-dev \
          qt6-tools-dev \
          qt6-l10n-tools \
          qmake6 \
          cmake \
          g++ \
          build-essential \
          libgtest-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libfontconfig1 \
          libsqlite3-dev \
          cppcheck \
          valgrind
    
    - name: Install Google Test
      run: |
        cd /usr/src/gtest
        sudo cmake CMakeLists.txt
        sudo make -j$(nproc)
        sudo cp lib/*.a /usr/lib 2>/dev/null || sudo cp *.a /usr/lib
    
    - name: Verify Qt 6 installation
      run: |
        qmake6 --version
        which qmake6
    
    - name: Code Quality Analysis
      run: |
        echo "Running static analysis..."
        cppcheck --enable=all --xml --xml-version=2 . 2> cppcheck_report.xml || true
        echo "Static analysis completed"
    
    - name: Security Scan
      run: |
        echo "Running security analysis..."
        grep -r -i "password\|secret\|key" --include="*.cpp" --include="*.h" . || echo "No obvious credential issues found"
        echo "Security scan completed"
    
    - name: Build project with qmake6
      run: |
        qmake6 Embedded.pro
        make -j$(nproc)
    
    - name: Run Comprehensive Tests
      run: |
        mkdir -p test_results
        
        if [ -f ./tests ]; then
          echo "Running unit tests..."
          ./tests --gtest_output=xml:test_results/unit_tests.xml
        elif [ -f ./test ]; then
          echo "Running test executable"  
          ./test --gtest_output=xml:test_results/tests.xml
        elif [ -f ./Embedded_tests ]; then
          echo "Running Embedded tests..."
          ./Embedded_tests --gtest_output=xml:test_results/embedded_tests.xml
        else
          echo "No test executable found"
          ls -la ./ | grep -E "\.(out|exe|bin)$" || echo "No executable files found"
        fi
    
    - name: Performance Benchmarking
      run: |
        echo "Running performance tests..."
        if [ -f ./Embedded ]; then
          echo "Measuring application performance..."
          timeout 30s /usr/bin/time -v ./Embedded --version 2>&1 | tee performance_report.txt || echo "Performance test completed with timeout"
          
          echo "=== Performance Metrics ===" >> performance_summary.txt
          grep "Maximum resident set size\|User time\|System time" performance_report.txt >> performance_summary.txt 2>/dev/null || echo "Performance metrics extracted"
          cat performance_summary.txt 2>/dev/null || echo "Performance summary created"
        fi
    
    - name: Prepare Deployment Package
      run: |
        echo "Preparing deployment package..."
        mkdir -p deployment_package
        
        if [ -f ./Embedded ]; then
          cp ./Embedded deployment_package/
          echo "Executable copied to deployment package"
        fi
        
        find . -name "*.conf" -o -name "*.ini" -o -name "*.db" | xargs -I {} cp {} deployment_package/ 2>/dev/null || true
        
        echo "Build Date: $(date)" > deployment_package/build_info.txt
        echo "Commit Hash: $GITHUB_SHA" >> deployment_package/build_info.txt
        echo "Branch: $GITHUB_REF_NAME" >> deployment_package/build_info.txt
        
        ls -la deployment_package/
    
    - name: Upload Comprehensive Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-build-artifacts-${{ github.run_number }}
        path: |
          Embedded
          deployment_package/
          test_results/
          performance_*.txt
          cppcheck_report.xml
          *.o
          Makefile
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: complete-build-artifacts-${{ github.run_number }}
        path: ./artifacts
    
    - name: Prepare Deployment Directory
      run: |
        echo "Preparing deployment directory..."
        mkdir -p deployment
        
        # Copy executable and deployment package
        cp artifacts/Embedded deployment/ 2>/dev/null || true
        cp -r artifacts/deployment_package/* deployment/ 2>/dev/null || true
        
        # Make executable runnable
        chmod +x deployment/Embedded || true
        
        # Create deployment manifest
        echo "Deployment Information" > deployment/DEPLOYMENT_INFO.txt
        echo "Build Date: $(date)" >> deployment/DEPLOYMENT_INFO.txt
        echo "Version: v${{ github.run_number }}" >> deployment/DEPLOYMENT_INFO.txt
        echo "Commit: ${{ github.sha }}" >> deployment/DEPLOYMENT_INFO.txt
        
        ls -la deployment/
    
    - name: Create Release Archive (.zip)
      run: |
        cd deployment
        zip -r ../tic-tac-toe-v${{ github.run_number }}.zip ./*
        cd ..
        echo "Release archive created: tic-tac-toe-v${{ github.run_number }}.zip"
    
    - name: Create GitHub Release Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a v${{ github.run_number }} -m "Automated release v${{ github.run_number }}"
        git push origin v${{ github.run_number }}
    
    - name: Deploy Application
      run: |
        echo "Deploying Tic Tac Toe application..."
        DEPLOY_DIR="/tmp/tic-tac-toe-production"
        mkdir -p $DEPLOY_DIR
        cp -r deployment/* $DEPLOY_DIR/
        echo "Application deployed successfully to $DEPLOY_DIR"
    
    - name: Verify Deployment
      run: |
        if [ -f /tmp/tic-tac-toe-production/Embedded ]; then
          echo "Deployment verification: SUCCESS"
          /tmp/tic-tac-toe-production/Embedded --version || echo "Version check completed"
        else
          echo "Deployment verification: FAILED"
          exit 1
        fi
    
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package-v${{ github.run_number }}
        path: |
          tic-tac-toe-v${{ github.run_number }}.zip
          deployment/
        retention-days: 30

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Automated release for build ${{ github.run_number }}.
          See attached files for the game executable and deployment package.
        files: |
          tic-tac-toe-v${{ github.run_number }}.zip
          deployment/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
